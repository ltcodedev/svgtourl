"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _plugin() {
  const data = require("@parcel/plugin");

  _plugin = function () {
    return data;
  };

  return data;
}

function _tsUtils() {
  const data = require("@parcel/ts-utils");

  _tsUtils = function () {
    return data;
  };

  return data;
}

function _typescript() {
  const data = _interopRequireDefault(require("typescript"));

  _typescript = function () {
    return data;
  };

  return data;
}

function _sourceMap() {
  const data = _interopRequireDefault(require("@parcel/source-map"));

  _sourceMap = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = new (_plugin().Transformer)({
  loadConfig({
    config,
    options
  }) {
    return (0, _tsUtils().loadTSConfig)(config, options);
  },

  async transform({
    asset,
    config,
    options
  }) {
    asset.type = 'js';
    let code = await asset.getCode();

    let transpiled = _typescript().default.transpileModule(code, {
      compilerOptions: {
        // React is the default. Users can override this by supplying their own tsconfig,
        // which many TypeScript users will already have for typechecking, etc.
        jsx: _typescript().default.JsxEmit.React,
        ...config,
        // Always emit output
        noEmit: false,
        // Don't compile ES `import`s -- scope hoisting prefers them and they will
        // otherwise compiled to CJS via babel in the js transformer
        module: _typescript().default.ModuleKind.ESNext,
        sourceMap: !!asset.env.sourceMap
      },
      fileName: asset.filePath // Should be relativePath?

    });

    let map;
    let {
      outputText,
      sourceMapText
    } = transpiled;

    if (sourceMapText != null) {
      map = new (_sourceMap().default)(options.projectRoot);
      map.addVLQMap(JSON.parse(sourceMapText));
      outputText = outputText.substring(0, outputText.lastIndexOf('//# sourceMappingURL'));
    }

    return [{
      type: 'js',
      content: outputText,
      map
    }];
  }

});

exports.default = _default;