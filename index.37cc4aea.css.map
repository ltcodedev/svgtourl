{"mappings":"A;;;;;AA2UE;;;;AAGF;;;;;AAIA;;;;;AAKA;;;;AAGE;;;;;;;;;;AASA;;;;;;;;;AAQF;;;;;AAIE;;;;AAGA;;;;AAGA;;;;;;;;AAOA;;;;;;;;;AASE;;;;AAGE;;;;AAGA;;;;AAGA;;;;;;;;;;;;;AAYN;;;;;AAIE;;;;;;;AAMA;;;;;;;AAMA;;;;;;;;AAOF;;;;AAGI;;;;AAGF;;;;;;;;;AAQF;;;;;;;;A;;;;AAUE;;;;;AAIA;;;;;;;AAMA;;;;;;AAKF;;;;;AAIA;;;;;;;;;;;;AAWA;;;;;;;;;;;;AAWA;;;;;;;AAME;;;;;;;;;AAQA;;;;;AAIA;;;;;AAIF;;;;;;AAKE;;;;;;;;;;;;AAWA;;;;AAGA;;;;AAGA;;;;AAGE;;;;AAGF","sources":["src/App.vue"],"sourcesContent":["<template>\n  <Header />\n  <div class=\"wrapper\">\n      <header class=\"header\">\n        <h1>{{ applicationName }}</h1>\n      </header>\n\n      <main>\n        <div class=\"panel\">\n\n          <div class=\"options\">\n              External quotes:\n              <label class=\"options__label\">\n                <input\n                  type=\"radio\"\n                  value=\"single\"\n                  name=\"quotes\"\n                  class=\"options__input visuallyhidden\"\n                >\n                <span class=\"options__text\">single</span>\n              </label>\n\n              <span class=\"options__middle-word\">/</span>\n\n              <label class=\"options__label\">\n                <input\n                  type=\"radio\"\n                  value=\"double\"\n                  name=\"quotes\"\n                  class=\"options__input visuallyhidden\"\n                  checked\n                >\n                <span class=\"options__text\">double</span>\n              </label>\n          </div>\n\n\n          <dl class=\"about\">\n            <dt class=\"expander\">About tool</dt>\n            <dd class=\"expanded hidden\">\n              <p>We can use SVG in CSS via data URI, but without encoding it works only in Webkit based browsers. If encode SVG using <code>encodeURIComponent()</code> it will work everywhere.</p>\n\n              <p>SVG must have attribute <strong>xmlns</strong> like this: <code>xmlns='http://www.w3.org/2000/svg'</code>. If it doesn't exist, it will be added automagically.</p>\n\n              <p>Encoded SVG can be used in <code>background</code> (<a href=\"http://codepen.io/collection/DyJRrY/\">demos</a>) and <code>border-image</code> (<a href=\"http://codepen.io/yoksel/full/GjgYgj/\">demo</a>).</p>\n            </dd>\n          </dl>\n        </div>\n\n        <div class=\"containers\">\n          <div class=\"container container--left container container--init\">\n              <h4>Insert your SVG:</h4>\n              <button class=\"button-example\">Example</button>\n              <textarea\n                name=\"init\"\n                id=\"init\"\n                spellcheck=\"false\"\n                ></textarea>\n          </div>\n\n          <div class=\"container container--right container container--result\">\n            <h4>Take encoded:</h4>\n            <textarea\n              name=\"result\"\n              id=\"result\"\n              spellcheck=\"false\"\n            ></textarea>\n          </div>\n        </div>\n\n        <div class=\"containers\">\n          <div class=\"container container--left container container--result-css\">\n            <h4>Ready for CSS:</h4>\n            <textarea\n              name=\"result-css\"\n              id=\"result-css\"\n              spellcheck=\"false\"\n            ></textarea>\n          </div>\n\n          <div class=\"container container--right container container--demo\">\n            <h4>Preview:</h4>\n\n            <div class=\"contrast-buttons\">Background:\n              <button\n                type=\"button\"\n                class=\"contrast-button contrast-button--white\"\n                data-color=\"white\"\n                title=\"White\">\n                <span class=\"visuallyhidden\">White</span>\n              </button>\n              <button\n                type=\"button\"\n                class=\"contrast-button contrast-button--silver\"\n                data-color=\"silver\"\n                title=\"Silver\">\n                <span class=\"visuallyhidden\">Silver</span>\n              </button>\n              <button\n                type=\"button\"\n                class=\"contrast-button contrast-button--black\"\n                data-color=\"black\"\n                title=\"Black\">\n                <span class=\"visuallyhidden\">Black</span>\n              </button>\n            </div>\n\n            <div class=\"demo-wrapper\">\n              <div id=\"demo\" class=\"demo\"></div>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      <footer class=\"footer\">\n        <a href=\"https://github.com/yoksel/url-encoder/\">Project on GitHub</a>\n        <a href=\"https://twitter.com/yoksel_en\">@yoksel_en</a>\n      </footer>\n    </div>\n</template>\n\n<script>\n  import { reactive, computed } from \"vue\";\n  import Header from \"./layout/Header.vue\";\n\n  export default {\n    data(){\n      return {\n        applicationName: \"URL-encoder for SVG\"\n      }\n    },\n\n    components(){\n      return{\n        Header\n      }\n    },\n\n    mounted(){\n      var doc = document;\n\nvar initTextarea = doc.querySelector( \"#init\" );\nvar resultTextarea = doc.querySelector( \"#result\" );\nvar resultCssTextarea = doc.querySelector( \"#result-css\" );\nvar resultDemo = doc.querySelector( \"#demo\" );\nvar demoWrapper = doc.querySelector( \".demo-wrapper\" );\nvar contrastButtons = doc.querySelectorAll( \".contrast-button\" );\nvar contrastButtonCurrent = null;\nvar backgroundColor = '';\n\nvar expanders = doc.querySelectorAll( \".expander\" );\nvar expandedClass = \"expanded\";\nvar demoContrastClass = \"demo-contrast-on\";\nvar symbols = /[\\r\\n%#()<>?\\[\\\\\\]^`{|}]/g;\n\nconst quotesInputs = document.querySelectorAll('.options__input');\nlet externalQuotesValue = document.querySelector('.options__input:checked').value;\nlet quotes = getQuotes();\n\nconst buttonExample = document.querySelector('.button-example');\n\n\n// Textarea Actions\n//----------------------------------------\n\ninitTextarea.onchange = function() {\n    resultTextarea.value = encodeSVG(initTextarea.value);\n};\n\ninitTextarea.onkeyup = function() {\n    getResults();\n};\n\nfunction getResults() {\n    if(!initTextarea.value) {\n        return;\n    }\n\n    var namespaced = addNameSpace( initTextarea.value );\n    var escaped = encodeSVG( namespaced );\n    resultTextarea.value = escaped;\n    var resultCss = `background-image: url(${quotes.level1}data:image/svg+xml,${escaped}${quotes.level1});`;\n    resultCssTextarea.value = resultCss;\n    resultDemo.setAttribute( \"style\", resultCss );\n}\n\n\n// Tabs Actions\n//----------------------------------------\n\nfor (var i = 0; i < expanders.length; i++) {\n    var expander = expanders[i];\n\n    expander.onclick = function() {\n        var parent = this.parentNode;\n        var expanded = parent.querySelector( \".\" + expandedClass );\n        expanded.classList.toggle( \"hidden\" );\n        this.classList.toggle( \"opened\" );\n    };\n}\n\n\n// Switch quotes\n//----------------------------------------\n\nquotesInputs.forEach(input => {\n    input.addEventListener('input', function () {\n        externalQuotesValue = this.value;\n        quotes = getQuotes();\n        getResults();\n    });\n});\n\n\n// Set example\n//----------------------------------------\n\nbuttonExample.addEventListener('click', () => {\n    initTextarea.value = `<svg>\n  <circle r=\"50\" cx=\"50\" cy=\"50\" fill=\"tomato\"/>\n  <circle r=\"41\" cx=\"47\" cy=\"50\" fill=\"orange\"/>\n  <circle r=\"33\" cx=\"48\" cy=\"53\" fill=\"gold\"/>\n  <circle r=\"25\" cx=\"49\" cy=\"51\" fill=\"yellowgreen\"/>\n  <circle r=\"17\" cx=\"52\" cy=\"50\" fill=\"lightseagreen\"/>\n  <circle r=\"9\" cx=\"55\" cy=\"48\" fill=\"teal\"/>\n</svg>`;\n    getResults();\n})\n\n\n// Demo Background Switch\n//----------------------------------------\n\nfunction contrastButtonsSetCurrent(button) {\n    const classCurrent = 'contrast-button--current';\n\n    if (contrastButtonCurrent) {\n        contrastButtonCurrent.classList.remove(classCurrent);\n    }\n\n    backgroundColor = button.dataset.color;\n    contrastButtonCurrent = button;\n    button.classList.add(classCurrent);\n}\n\ncontrastButtons.forEach(button => {\n    if (!backgroundColor) {\n        contrastButtonsSetCurrent(button);\n    }\n\n    button.addEventListener('click', function () {\n        contrastButtonsSetCurrent(this);\n        demoWrapper.style.background = backgroundColor;\n    });\n});\n\n\n// Namespace\n//----------------------------------------\n\nfunction addNameSpace( data ) {\n    if ( data.indexOf( 'http://www.w3.org/2000/svg' ) < 0 ) {\n        data = data.replace( /<svg/g, `<svg xmlns=${quotes.level2}http://www.w3.org/2000/svg${quotes.level2}` );\n    }\n\n    return data;\n}\n\n\n// Encoding\n//----------------------------------------\n\nfunction encodeSVG( data ) {\n    // Use single quotes instead of double to avoid encoding.\n    if ( externalQuotesValue === 'double') {\n        data = data.replace( /\"/g, '\\'' );\n    }\n    else {\n       data = data.replace( /'/g, '\"' );\n    }\n\n    data = data.replace( />\\s{1,}</g, \"><\" );\n    data = data.replace( /\\s{2,}/g, \" \" );\n\n    return data.replace( symbols, encodeURIComponent );\n}\n\n\n// Get quotes for levels\n//----------------------------------------\n\nfunction getQuotes() {\n    const double = `\"`;\n    const single = `'`;\n\n    return {\n        level1: externalQuotesValue === 'double' ? double : single,\n        level2: externalQuotesValue === 'double' ? single : double\n    };\n}\n\n// Common\n//----------------------------------------\n\nfunction out( data ) {\n    console.log( data );\n}\n    },\n\n    setup() {\n      const state = reactive({\n        count: 0,\n        double: computed(() => state.count * 2),\n      });\n\n      function increment() {\n        state.count++;\n      }\n\n      return {\n        state,\n        increment,\n      };\n    },\n  };\n</script>\n\n<style lang=\"scss\" scoped>\n\nBODY {\n  font: 16px/1.4 \"Trebuchet MS\", Arial, sans-serif;\n  color: #000;\n}\n\nA {\n  color: steelblue;\n}\n\nH1 {\n  font: 2em/1.4 Georgia, serif;\n  text-align: center;\n  }\n\nH4 {\n  margin: 0;\n  margin-bottom: .15em;\n  font: 1.3em/1.4 Georgia, serif;\n  }\n\nP {\n  margin: 1.2rem 0;\n  }\n\nTEXTAREA {\n  width: 100%;\n  height: 150px;\n  margin: 0;\n  border: 1px solid #CCC;\n  border-radius: 10px;\n  font-size: 13px;\n  font-family: monospace;\n  }\n\nCODE {\n  padding: 0 3px;\n  background: #EEE;\n  border-radius: 5px;\n  text-shadow: 1px 1px 0 white;\n  font: 14px/1.4 monospace;\n  color: #333;\n  }\n\nCODE I {\n  font-style: italic;\n  color: black;\n  }\n\nDL , DD, DT{\n  margin: 0;\n  }\n  DL {\n    text-align: right;\n    }\n  DT {\n    border-bottom: 1px dashed;\n    display: inline-block;\n    line-height: 1;\n    color: steelblue;\n    cursor: pointer;\n    }\n    DT:after {\n      content: \"\";\n      display: inline-block;\n      border: 0 solid transparent;\n      border-width: 8px 4px 0;\n      border-top-color: currentColor;\n      border-bottom-color: currentColor;\n      margin-left: 5px;\n      }\n      .opened:after {\n        border-width: 0 4px 8px ;\n        }\n  DD {\n    text-align: left;\n    }\n\n.hidden {\n  display: none;\n  }\n\n.visuallyhidden {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  margin: -1px;\n  border: 0;\n  padding: 0;\n  white-space: nowrap;\n  clip-path: inset(100%);\n  clip: rect(0 0 0 0);\n  overflow: hidden;\n}\n\n.wrapper {\n  width: 650px;\n  margin: 1.5rem auto 4rem;\n  }\n\n.header {\n  position: relative;\n  margin-bottom: 2rem;\n  padding-bottom: 1rem;\n  border-bottom: 1px solid #CCC;\n}\n  .header:before {\n    content: \"\";\n    display: table;\n    width: 100%;\n    clear: both;\n  }\n\n.langs {\n  position: absolute;\n  top: 0;\n  right: 0;\n  margin: auto;\n  list-style-type: none;\n}\n  .langs__item {\n    display: inline-block;\n  }\n  .langs__link--current {\n    color: #000;\n  }\n\n.footer {\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n  margin-top: 3rem;\n  padding-top: 2rem;\n  border-top: 1px solid #CCC;\n}\n\n.panel {\n  position: relative;\n  z-index: 1;\n  margin-bottom: 2.5rem;\n  display: flex;\n  justify-content: space-between;\n}\n\n.options {\n  position: relative;\n}\n\n.options__middle-word {\n  vertical-align: middle;\n  color: #AAA\n}\n\n.options__text {\n  display: inline-block;\n  border-bottom: 1px dashed;\n  color: steelblue;\n  cursor: pointer;\n}\n.options__input:checked + .options__text {\n  border: 0;\n  color: inherit;\n  cursor: default;\n}\n\n.expander {\n  position: relative;\n  z-index: 2;\n}\n\n.expanded {\n  position: absolute;\n  top: -15px;\n  right: -15px;\n  left: -15px;\n  padding: 2rem 1.5rem 1rem;\n  background: #FFF;\n  border: 1px solid #CCC;\n  border-radius: 5px;\n  box-shadow: 0 0 0 5px rgba(0,0,0,.1);\n}\n\n.button-example {\n  padding: 0;\n  border: 0;\n  border-bottom: 1px dashed;\n  line-height: 1;\n  align-self: center;\n  font: inherit;\n  font-size: 14px;\n  color: steelblue;\n  cursor: pointer;\n}\n\n.containers {\n  margin-bottom: 32px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  }\n\n.container {\n  position: relative;\n  width: 48%;\n  margin-bottom: 1em;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  }\n\n.demo-wrapper {\n  width: 100%;\n  border: 1px dashed rgba(0,0,0,.25);\n  }\n  .demo {\n    height: 150px;\n    background-repeat: no-repeat;\n    }\n\n.contrast-buttons {\n  display: flex;\n  align-items: center;\n  margin-bottom: .4em;\n  }\n  .contrast-button {\n    display: block;\n    width: 2em;\n    height: 2em;\n    margin-left: 5px;\n    padding: 0;\n    border-radius: 50%;\n    border: 1px solid rgba(0,0,0,.25);\n    outline: none;\n    cursor: pointer;\n    }\n\n  .contrast-button--current {\n    box-shadow: 0 0 0 3px steelblue;\n    }\n  .contrast-button:active {\n    box-shadow: 0 0 0 3px rgba(0,0,0,.25);\n    }\n\n  .contrast-button--white {\n    background: white;\n    }\n  .contrast-button--silver {\n    background: silver;\n    }\n  .contrast-button--black {\n    background: black;\n    }\n</style>"],"names":[],"version":3,"file":"index.37cc4aea.css.map","sourceRoot":"/__parcel_source_root/"}